import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:intl/intl.dart';

// Import Widgets ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
import 'package:rider_customer_app/widgets/car_type_card.dart';
import 'package:rider_customer_app/widgets/location_input.dart';
import 'package:rider_customer_app/widgets/date_time_selection.dart';
import 'package:rider_customer_app/widgets/toggle_tab.dart';
import 'package:rider_customer_app/widgets/app_drawer.dart'; // <<< Import AppDrawer ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

// Import Utilities (Logic) ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
import 'package:rider_customer_app/utils/location_permission_handler.dart';

// Import Models
import 'package:rider_customer_app/models/car_type.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final MapController mapController = MapController();
  final LatLng _center = const LatLng(13.736717, 100.523186); // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø)
  LatLng? _currentLocation; // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  LatLng? _destinationLocation; // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á

  String _pickupAddress = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô...';
  String _destinationAddress = '‡∏õ‡πâ‡∏≠‡∏ô‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì';

  bool _isScheduledRide = false; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏£‡∏ñ‡∏î‡πà‡∏ß‡∏ô / ‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
  DateTime _selectedDate = DateTime.now();
  TimeOfDay _selectedTime = TimeOfDay.now();

  String _selectedCarType = 'Standard'; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

  // ‡πÉ‡∏ä‡πâ Model CarType ‡πÅ‡∏ó‡∏ô Map<String, String>
  final List<CarType> _carTypes = [
    CarType(name: 'Standard', price: '‡∏ø90', time: '2-5 min'),
    CarType(name: 'Premium', price: '‡∏ø120', time: '3-6 min'),
    CarType(name: 'SUV', price: '‡∏ø150', time: '5-8 min'),
  ];

  @override
  void initState() {
    super.initState();
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å LocationPermissionHandler
    LocationPermissionHandler.determinePosition(
      context: context, // ‡∏™‡πà‡∏á context ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á SnackBar
      onLocationDetermined: (position) {
        setState(() {
          _currentLocation = LatLng(position.latitude, position.longitude);
          mapController.move(_currentLocation!, 15.0);
          _pickupAddress = '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (lat: ${_currentLocation!.latitude.toStringAsFixed(2)}, lon: ${_currentLocation!.longitude.toStringAsFixed(2)})';
        });
      },
      onError: (message) {
        // Handle error, e.g., show a dialog or SnackBar
        if (mounted) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Widget ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô tree ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á SnackBar
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(message)),
          );
        }
      },
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Date Picker
  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 30)), // ‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ 30 ‡∏ß‡∏±‡∏ô
    );
    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Time Picker
  Future<void> _selectTime(BuildContext context) async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: _selectedTime,
    );
    if (picked != null && picked != _selectedTime) {
      setState(() {
        _selectedTime = picked;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true, // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ body ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á AppBar
      appBar: AppBar(
        backgroundColor: Colors.transparent, // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ AppBar ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
        elevation: 0,
        leading: Padding(
          padding: const EdgeInsets.all(8.0),
          child: CircleAvatar(
            backgroundColor: Colors.white,
            // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô: ‡πÉ‡∏ä‡πâ Builder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ BuildContext ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Scaffold.of()
            child: Builder(
              builder: (BuildContext innerContext) {
                return IconButton(
                  icon: const Icon(Icons.menu, color: Colors.black),
                  onPressed: () {
                    Scaffold.of(innerContext).openDrawer(); // ‡πÉ‡∏ä‡πâ innerContext
                  },
                );
              },
            ),
          ),
        ),
        actions: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: CircleAvatar(
              backgroundColor: Colors.white,
              child: IconButton(
                icon: const Icon(Icons.person, color: Colors.black),
                onPressed: () {
                  // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡∏à‡∏∞ push ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà)
                  Navigator.pushNamed(context, '/profile'); // ‡πÉ‡∏ä‡πâ named route
                },
              ),
            ),
          ),
        ],
      ),
      body: Stack(
        children: [
          // ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà (FlutterMap)
          FlutterMap(
            mapController: mapController,
            options: MapOptions(
              initialCenter: _currentLocation ?? _center, // ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
              initialZoom: 15.0,
              interactionOptions: const InteractionOptions(
                flags: InteractiveFlag.all, // ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ã‡∏π‡∏°‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
              ),
            ),
            children: [
              TileLayer(
                urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
                userAgentPackageName: 'com.example.flutter_ride_app', // ‡∏£‡∏∞‡∏ö‡∏∏ package name
              ),
              // Marker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
              if (_currentLocation != null)
                MarkerLayer(
                  markers: [
                    Marker(
                      point: _currentLocation!,
                      width: 80,
                      height: 80,
                      child: const Icon(Icons.person_pin_circle, color: Colors.blue, size: 40),
                    ),
                  ],
                ),
              // Marker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
              if (_destinationLocation != null)
                MarkerLayer(
                  markers: [
                    Marker(
                      point: _destinationLocation!,
                      width: 80,
                      height: 80,
                      child: const Icon(Icons.location_on, color: Colors.red, size: 40),
                    ),
                  ],
                ),
            ],
          ),

          // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          if (_currentLocation != null)
            Positioned(
              bottom: 300, // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Å‡∏±‡∏ö bottom sheet
              right: 16,
              child: FloatingActionButton(
                onPressed: () {
                  mapController.move(_currentLocation!, 15.0); // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                },
                mini: true,
                backgroundColor: Colors.white,
                child: const Icon(Icons.my_location, color: Colors.blue), // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô My Location
              ),
            ),

          // Bottom Sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              decoration: const BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(20),
                  topRight: Radius.circular(20),
                ),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black26,
                    blurRadius: 10,
                    offset: Offset(0, -5),
                  ),
                ],
              ),
              padding: const EdgeInsets.all(16.0),
              child: Column(
                mainAxisSize: MainAxisSize.min, // ‡πÉ‡∏´‡πâ Column ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // ‡∏™‡∏•‡∏±‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏£‡∏ñ‡∏î‡πà‡∏ß‡∏ô / ‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
                  Center(
                    child: Container(
                      decoration: BoxDecoration(
                        color: Colors.grey[200],
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          ToggleTab( // ‡πÉ‡∏ä‡πâ Widget ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
                            text: '‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡πà‡∏ß‡∏ô',
                            isSelected: !_isScheduledRide,
                            onTap: () {
                              setState(() {
                                _isScheduledRide = false;
                              });
                            },
                          ),
                          ToggleTab( // ‡πÉ‡∏ä‡πâ Widget ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
                            text: '‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤',
                            isSelected: _isScheduledRide,
                            onTap: () {
                              setState(() {
                                _isScheduledRide = true;
                              });
                            },
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 20),

                  // ‡∏ä‡πà‡∏≠‡∏á‡∏õ‡πâ‡∏≠‡∏ô‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö
                  LocationInput( // ‡πÉ‡∏ä‡πâ Widget ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
                    icon: Icons.my_location,
                    label: '‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö',
                    address: _pickupAddress,
                    onTap: () {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(content: Text('‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≤‡∏¢‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ')),
                      );
                    },
                  ),
                  const SizedBox(height: 10),

                  // ‡∏ä‡πà‡∏≠‡∏á‡∏õ‡πâ‡∏≠‡∏ô‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á
                  LocationInput( // ‡πÉ‡∏ä‡πâ Widget ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
                    icon: Icons.location_on,
                    label: '‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á',
                    address: _destinationAddress,
                    onTap: () {
                      // **‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà**
                      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
                      setState(() {
                        _destinationAddress = '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏™‡∏¢‡∏≤‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏Å‡∏≠‡∏ô';
                        _destinationLocation = const LatLng(13.746654, 100.534891); // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á LatLng ‡∏™‡∏¢‡∏≤‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏Å‡∏≠‡∏ô
                      });

                      // ‡∏Ç‡∏¢‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á
                      if (_currentLocation != null && _destinationLocation != null) {
                        final bounds = LatLngBounds.fromPoints([_currentLocation!, _destinationLocation!]);
                        mapController.fitCamera(
                          CameraFit.bounds(
                            bounds: bounds,
                            padding: const EdgeInsets.all(100.0), // Padding ‡∏£‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                          ),
                        );
                      } else if (_destinationLocation != null) {
                        mapController.move(_destinationLocation!, 15.0);
                      }
                    },
                  ),
                  const SizedBox(height: 20),

                  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
                  if (_isScheduledRide)
                    Column(
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: DateTimeSelection( // ‡πÉ‡∏ä‡πâ Widget ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
                                icon: Icons.calendar_today,
                                label: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
                                value: DateFormat('dd/MM/yyyy').format(_selectedDate),
                                onTap: () => _selectDate(context),
                              ),
                            ),
                            const SizedBox(width: 10),
                            Expanded(
                              child: DateTimeSelection( // ‡πÉ‡∏ä‡πâ Widget ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
                                icon: Icons.access_time,
                                label: '‡πÄ‡∏ß‡∏•‡∏≤',
                                value: _selectedTime.format(context),
                                onTap: () => _selectTime(context),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 20),
                      ],
                    ),

                  // ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ
                  const Text(
                    '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 10),
                  SizedBox(
                    height: 100, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Card ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÑ‡∏î‡πâ
                    child: ListView.builder(
                      scrollDirection: Axis.horizontal,
                      itemCount: _carTypes.length,
                      itemBuilder: (context, index) {
                        final carType = _carTypes[index];
                        return CarTypeCard( // ‡πÉ‡∏ä‡πâ Widget ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
                          carType: carType, // ‡∏™‡πà‡∏á Object CarType ‡πÑ‡∏õ
                          isSelected: _selectedCarType == carType.name,
                          onTap: () {
                            setState(() {
                              _selectedCarType = carType.name;
                            });
                          },
                        );
                      },
                    ),
                  ),
                  const SizedBox(height: 20),

                  // ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                  SizedBox(
                    width: double.infinity, // ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
                    child: ElevatedButton(
                      onPressed: () {
                        if (_currentLocation == null) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô')),
                          );
                          return;
                        }
                        if (_destinationLocation == null) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á')),
                          );
                          return;
                        }

                        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Backend)
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text(
                              _isScheduledRide
                                  ? '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏£‡∏ñ ${_selectedCarType} ‡πÑ‡∏õ ${_destinationAddress} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${DateFormat('dd/MM/yyyy').format(_selectedDate)} ‡πÄ‡∏ß‡∏•‡∏≤ ${_selectedTime.format(context)}'
                                  : '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏£‡∏ñ ${_selectedCarType} ‡πÑ‡∏õ ${_destinationAddress}',
                            ),
                          ),
                        );
                      },
                      style: ElevatedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 15),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                        backgroundColor: Colors.blue, // ‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°
                      ),
                      child: Text(
                        _isScheduledRide ? '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á' : '‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏£‡∏ñ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ',
                        style: const TextStyle(fontSize: 18, color: Colors.white, fontWeight: FontWeight.bold),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
      // üí° ‡πÉ‡∏ä‡πâ AppDrawer ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
      drawer: const AppDrawer(),
    );
  }
}